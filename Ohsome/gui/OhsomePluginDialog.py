# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OhsomePluginDialog
                                 A QGIS plugin
 Query Ohsome directly from QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-06-23
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Julian Psotta
        email                : julianpsotta@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtWidgets import (
    QAction,
    QDialog,
    QApplication,
    QMenu,
    QMessageBox,
    QDialogButtonBox,
    QVBoxLayout,
)
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that
# PyQt can populate your plugin with the elements from Qt Designer
from qgis._core import QgsProject

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "OhsomeDialogUI.ui")
)


class OhsomePluginDialogMain(QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(OhsomePluginDialogMain, self).__init__()
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self._iface = iface

        # Rename buttons
        self.button_box.button(QDialogButtonBox.Ok).setText("Apply")

        self.map_crs = self._iface.mapCanvas().mapSettings().destinationCrs()
        self.project = QgsProject.instance  # invoke a QgsProject instance


class ORStoolsDialog(QDialog, Ui_ORStoolsDialogBase):
    """Define the custom behaviour of Dialog"""

    def __init__(self, iface, parent=None):
        """
        :param iface: QGIS interface
        :type iface: QgisInterface

        :param parent: parent window for modality.
        :type parent: QDialog/QApplication
        """
        QDialog.__init__(self, parent)
        self.setupUi(self)

        self._iface = iface
        self.project = QgsProject.instance()  # invoke a QgsProject instance
        self.map_crs = self._iface.mapCanvas().mapSettings().destinationCrs()

    # def _on_prov_refresh_click(self):
    #     """Populates provider dropdown with fresh list from config.yml"""
    #
    #     providers = configmanager.read_config()['providers']
    #     self.provider_combo.clear()
    #     for provider in providers:
    #         self.provider_combo.addItem(provider['name'], provider)
    #
    # def _on_clear_listwidget_click(self):
    #     """Clears the contents of the QgsListWidget and the annotations."""
    #     items = self.routing_fromline_list.selectedItems()
    #     if items:
    #         # if items are selected, only clear those
    #         for item in items:
    #             row = self.routing_fromline_list.row(item)
    #             self.routing_fromline_list.takeItem(row)
    #             if self.annotations:
    #                 self.project.annotationManager().removeAnnotation(self.annotations.pop(row))
    #     else:
    #         # else clear all items and annotations
    #         self.routing_fromline_list.clear()
    #         self._clear_annotations()
    #
    # def _linetool_annotate_point(self, point, idx):
    #     annotation = QgsTextAnnotation()
    #
    #     c = QTextDocument()
    #     html = "<strong>" + str(idx) + "</strong>"
    #     c.setHtml(html)
    #
    #     annotation.setDocument(c)
    #
    #     annotation.setFrameSize(QSizeF(27, 20))
    #     annotation.setFrameOffsetFromReferencePoint(QPointF(5, 5))
    #     annotation.setMapPosition(point)
    #     annotation.setMapPositionCrs(self.map_crs)
    #
    #     return QgsMapCanvasAnnotationItem(annotation, self._iface.mapCanvas()).annotation()
    #
    # def _clear_annotations(self):
    #     """Clears annotations"""
    #     for annotation in self.annotations:
    #         if annotation in self.project.annotationManager().annotations():
    #             self.project.annotationManager().removeAnnotation(annotation)
    #     self.annotations = []
    #
    # def _on_linetool_init(self):
    #     """Hides GUI dialog, inits line maptool and add items to line list box."""
    #     self.hide()
    #     self.routing_fromline_list.clear()
    #     # Remove all annotations which were added (if any)
    #     self._clear_annotations()
    #
    #     self.line_tool = maptools.LineTool(self._iface.mapCanvas())
    #     self._iface.mapCanvas().setMapTool(self.line_tool)
    #     self.line_tool.pointDrawn.connect(lambda point, idx: self._on_linetool_map_click(point, idx))
    #     self.line_tool.doubleClicked.connect(self._on_linetool_map_doubleclick)
    #
    # def _on_linetool_map_click(self, point, idx):
    #     """Adds an item to QgsListWidget and annotates the point in the map canvas"""
    #
    #     transformer = transform.transformToWGS(self.map_crs)
    #     point_wgs = transformer.transform(point)
    #     self.routing_fromline_list.addItem("Point {0}: {1:.6f}, {2:.6f}".format(idx, point_wgs.x(), point_wgs.y()))
    #
    #     annotation = self._linetool_annotate_point(point, idx)
    #     self.annotations.append(annotation)
    #     self.project.annotationManager().addAnnotation(annotation)
    #
    # def _on_linetool_map_doubleclick(self):
    #     """
    #     Populate line list widget with coordinates, end line drawing and show dialog again.
    #
    #     :param points_num: number of points drawn so far.
    #     :type points_num: int
    #     """
    #
    #     self.line_tool.pointDrawn.disconnect()
    #     self.line_tool.doubleClicked.disconnect()
    #     QApplication.restoreOverrideCursor()
    #     self._iface.mapCanvas().setMapTool(self.last_maptool)
    #     self.show()
